# Generated from Expr.g4 by ANTLR 4.11.1
import sys

from antlr4 import *

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    # fmt: off
    return [
        4,0,19,141,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,56,
        8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,68,8,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,3,7,78,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,86,
        8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,
        102,8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,4,14,113,8,
        14,11,14,12,14,114,1,15,4,15,118,8,15,11,15,12,15,119,1,16,1,16,
        4,16,124,8,16,11,16,12,16,125,1,16,1,16,1,17,4,17,131,8,17,11,17,
        12,17,132,1,18,4,18,136,8,18,11,18,12,18,137,1,18,1,18,0,0,19,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,1,0,5,2,0,10,10,13,13,3,0,65,90,
        95,95,97,122,5,0,9,9,32,32,48,57,65,90,97,122,1,0,48,57,2,0,9,9,
        32,32,150,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,
        0,0,0,3,41,1,0,0,0,5,43,1,0,0,0,7,45,1,0,0,0,9,47,1,0,0,0,11,55,
        1,0,0,0,13,67,1,0,0,0,15,77,1,0,0,0,17,85,1,0,0,0,19,101,1,0,0,0,
        21,103,1,0,0,0,23,105,1,0,0,0,25,107,1,0,0,0,27,109,1,0,0,0,29,112,
        1,0,0,0,31,117,1,0,0,0,33,121,1,0,0,0,35,130,1,0,0,0,37,135,1,0,
        0,0,39,40,5,59,0,0,40,2,1,0,0,0,41,42,5,61,0,0,42,4,1,0,0,0,43,44,
        5,40,0,0,44,6,1,0,0,0,45,46,5,41,0,0,46,8,1,0,0,0,47,48,5,44,0,0,
        48,10,1,0,0,0,49,50,5,76,0,0,50,51,5,69,0,0,51,56,5,84,0,0,52,53,
        5,108,0,0,53,54,5,101,0,0,54,56,5,116,0,0,55,49,1,0,0,0,55,52,1,
        0,0,0,56,12,1,0,0,0,57,58,5,80,0,0,58,59,5,82,0,0,59,60,5,73,0,0,
        60,61,5,78,0,0,61,68,5,84,0,0,62,63,5,112,0,0,63,64,5,114,0,0,64,
        65,5,105,0,0,65,66,5,110,0,0,66,68,5,116,0,0,67,57,1,0,0,0,67,62,
        1,0,0,0,68,14,1,0,0,0,69,70,5,80,0,0,70,71,5,85,0,0,71,72,5,83,0,
        0,72,78,5,72,0,0,73,74,5,112,0,0,74,75,5,117,0,0,75,76,5,115,0,0,
        76,78,5,104,0,0,77,69,1,0,0,0,77,73,1,0,0,0,78,16,1,0,0,0,79,80,
        5,80,0,0,80,81,5,79,0,0,81,86,5,80,0,0,82,83,5,112,0,0,83,84,5,111,
        0,0,84,86,5,112,0,0,85,79,1,0,0,0,85,82,1,0,0,0,86,18,1,0,0,0,87,
        88,5,67,0,0,88,89,5,79,0,0,89,90,5,77,0,0,90,91,5,80,0,0,91,92,5,
        65,0,0,92,93,5,82,0,0,93,102,5,69,0,0,94,95,5,99,0,0,95,96,5,111,
        0,0,96,97,5,109,0,0,97,98,5,112,0,0,98,99,5,97,0,0,99,100,5,114,
        0,0,100,102,5,101,0,0,101,87,1,0,0,0,101,94,1,0,0,0,102,20,1,0,0,
        0,103,104,5,43,0,0,104,22,1,0,0,0,105,106,5,45,0,0,106,24,1,0,0,
        0,107,108,5,42,0,0,108,26,1,0,0,0,109,110,5,47,0,0,110,28,1,0,0,
        0,111,113,7,0,0,0,112,111,1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,
        0,114,115,1,0,0,0,115,30,1,0,0,0,116,118,7,1,0,0,117,116,1,0,0,0,
        118,119,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,32,1,0,0,0,121,
        123,5,39,0,0,122,124,7,2,0,0,123,122,1,0,0,0,124,125,1,0,0,0,125,
        123,1,0,0,0,125,126,1,0,0,0,126,127,1,0,0,0,127,128,5,39,0,0,128,
        34,1,0,0,0,129,131,7,3,0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,
        1,0,0,0,132,133,1,0,0,0,133,36,1,0,0,0,134,136,7,4,0,0,135,134,1,
        0,0,0,136,137,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,139,1,
        0,0,0,139,140,6,18,0,0,140,38,1,0,0,0,12,0,55,67,77,85,101,114,119,
        123,125,132,137,1,6,0,0
    ]
    # fmt: on


class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    LET = 6
    PRINT = 7
    PUSH = 8
    POP = 9
    COMPARE = 10
    ADD = 11
    SUB = 12
    MUL = 13
    DIV = 14
    NEWLINE = 15
    VAR = 16
    STRING = 17
    INT = 18
    WS = 19

    channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"]

    modeNames = ["DEFAULT_MODE"]

    literalNames = [
        "<INVALID>",
        "';'",
        "'='",
        "'('",
        "')'",
        "','",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
    ]

    symbolicNames = [
        "<INVALID>",
        "LET",
        "PRINT",
        "PUSH",
        "POP",
        "COMPARE",
        "ADD",
        "SUB",
        "MUL",
        "DIV",
        "NEWLINE",
        "VAR",
        "STRING",
        "INT",
        "WS",
    ]

    ruleNames = [
        "T__0",
        "T__1",
        "T__2",
        "T__3",
        "T__4",
        "LET",
        "PRINT",
        "PUSH",
        "POP",
        "COMPARE",
        "ADD",
        "SUB",
        "MUL",
        "DIV",
        "NEWLINE",
        "VAR",
        "STRING",
        "INT",
        "WS",
    ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(
            self, self.atn, self.decisionsToDFA, PredictionContextCache()
        )
        self._actions = None
        self._predicates = None
